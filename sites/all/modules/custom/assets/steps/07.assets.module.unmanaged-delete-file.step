<?php
// $Id$

/**
 * @file
 * Demonstrates how to work with files and the File API.
 */


/**
 * Implements hook_menu().
 */
function assets_menu() {
  // Menu items for unmanaged file examples.
  $items['assets/unmanaged'] = array(
    'title' => 'Unmanaged file example',
    'description' => 'Examples of using processing an unmanaged file.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('assets_unmanaged_file_form'),
    'access callback' => TRUE,
  );
  $items['assets/unmanaged/view'] = array(
    'title' => 'Unmanaged files thumbnails',
    'description' => 'View a display of unmanaged files.',
    'page callback' => 'assets_display_unmanaged_files_page',
    'access callback' => TRUE,
  );
  $items['assets/unmanaged/delete'] = array(
    'title' => 'View unmanaged files',
    'description' => 'View thumbnails of unmanaged files.',
    'page callback' => 'assets_unmanaged_delete_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Returns form array with an example file input for an unmanaged file.
 */
function assets_unmanaged_file_form($form, &$form_state) {

  // Required for forms with file inputs.
  $form['#attributes'] = array('enctype' => "multipart/form-data");

  // Example of an unmanaged file
  $form['unmanaged_file'] = array(
    '#title' => t('Unmanaged file example'),
    '#type' => 'file'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}


/**
 * Validation for unmanaged file form.
 */
function assets_unmanaged_file_form_validate($form, &$form_state) {
  
  $validators = array(
    'file_validate_extensions' => array('jpg jpeg png gif'),
    'assets_validate_not_in_filename' => array('test.'),
  );

  // Additional validation functions in core:
  // file_validate_size();
  // file_validate_is_image();
  // file_validate_extensions();
  // file_validate_image_resolution();
  // file_validate_name_length();
  
  $file = file_save_upload('unmanaged_file', $validators, FALSE, FILE_EXISTS_REPLACE);

  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['unmanaged_file'] = $file;
    }
    else {
      form_set_error('unmanaged_file', t('The file could not be uploaded.'));
    }
  }
}


/**
 * Implements hook_file_validate().
 *
 * We're testing to see if the string 'test.' exists in the file name.
 */
function assets_file_validate($file) {
  $errors = array();
  if (strpos($file->filename, 'test.') !== FALSE) {
    $errors[] = 'The filename "test" is reserved, please change the filename and try again.';
  }
  return $errors;
}


/**
 * Validation function for file to test that a file does not certain a certain string.
 */
function assets_validate_not_in_filename($file, $string = 'test.') {
  $errors = array();
  if (strpos($file->filename, $string) !== FALSE) {
    $errors[] = t('The string "%string" is reserved, please remove this string from your filename and try again.', array('%string' => $string));
  }
  return $errors;
}


/**
 * Submit function for unmanaged file form.
 */
function assets_unmanaged_file_form_submit($form, &$form_state) {
  
  // Check if a file was uploaded.
  if ($file = $form_state['values']['unmanaged_file']) {
    
    // Create the directory if it doesn't exist
    $directory = 'public://assets/unmanaged';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
    
    // Copy the file over.
    $filename = file_unmanaged_copy($file->uri, $directory, FILE_EXISTS_REPLACE);
    
    drupal_set_message(t("Your file has been uploaded!"));
  }
}


/**
 * Menu callback; Displays thumbnails of uploaded unmanaged files.
 */
function assets_display_unmanaged_files_page() {
  
  $output = '';
  $directory = 'public://assets/unmanaged';
  $files = file_scan_directory($directory, '/.*/');
  
  // Loop through each file and display as thumbnail with 'view original' and 'delete' links.
  foreach ($files as $file) {
    $output .= '
      <div style="float:left;margin:10px;">
        ' . theme('image_style', array('style_name' => 'thumbnail', 'path' => $file->uri)) . '
        <div>' . l('View full size image', file_create_url($file->uri)) . '</div>
        <div>' . l('Delete', 'assets/unmanaged/delete', array('query' => array('destination' => current_path(), 'file' => $file->uri))) . '</div>
      </div>';
  }
  
  return $output;
}


/**
 * Menu callback; Takes care of deletion for unmanaged files.
 */
function assets_unmanaged_delete_callback() {

  // Throw an error if the request is in the wrong directory.
  if (!strpos($_GET['file'], 'public://assets/unmanaged/') === 0) {
    drupal_set_message(t("Sorry, you can't delete that file."), 'error');
    $error = TRUE;
  }

  // Throw an error if the file does not exist.
  if (!file_exists($_GET['file'])) {
    drupal_set_message(t("Sorry, that file does not exist."), 'error');
    $error = TRUE;
  }

  // All is good, go ahead and delete the file.
  if (!isset($error)) {
    drupal_unlink($_GET['file']);
    drupal_set_message(t("The file %file has been deleted.", array('%file' => $_GET['file'])));
  }
  
  drupal_goto($_GET['destination']);
}